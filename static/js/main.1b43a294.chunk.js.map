{"version":3,"sources":["components/repos/repo/repo.js","components/userinput/listcreator/listcreator.js","components/userinput/user-input.js","components/errorboundary/errorboundary.js","components/repos/repos.js","store/actions.js","containers/App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["Repo","_ref","name","description","owner","pushed_at","list","repo","Error","ListCreator","selectList","index","react_default","a","createElement","onChange","e","target","value","Userinput","changeUrl","submitUrl","url","className","type","onClick","listcreator","ErrorBoundary","state","hasError","error","info","this","setState","props","children","Component","Repos","newRepos","repos","map","errorboundary_ErrorBoundary","key","id","repos_repo_repo","login","passdata","data","payload","connect","userRepos","dispatch","axios","get","cutUrl","split","concat","apiUrl","then","response","console","log","catch","submit","user_input","repos_repos","Boolean","window","location","hostname","match","initialState","0","1","2","3","4","reducer","arguments","length","undefined","action","Object","objectSpread","newRepo","find","toConsumableArray","defineProperty","composeEnchancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","next","result","getState","thunk","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1b43a294.chunk.js","sourcesContent":["import React from 'react';\r\nimport List from './list/list';\r\nimport {parseFromNow, formatISO} from '../../../helper-functions';\r\nimport './repo.less'\r\n\r\nconst Repo = ({name, description, owner, pushed_at, list, repo}) => {\r\n\r\n    throw new Error();\r\n\r\n    return (<div className={\"repo\"}>\r\n        <div className={\"title\"}><h3>{name}</h3></div>\r\n        <div  className={\"content\"}>\r\n        <div><div>Description:</div><div>{description? description:\"lacking\"}</div></div>\r\n        <List list={list} repo={repo}></List>\r\n        <div><div>Owner:</div><div>{owner}</div></div>\r\n        <div><div>Last push:</div><div>{formatISO(pushed_at, 'MM-DD-YYYY LTS')}</div></div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Repo;","import React from 'react';\r\n\r\nconst ListCreator = ({selectList, index}) => {\r\n\r\n    //validate url here but do not diable input, red color and message\r\n\r\n    return (\r\n        <select onChange={(e)=>selectList(index, e.target.value)}>\r\n            <option value=\"none\">None</option>\r\n            <option value=\"open_issues\">open_issues</option>\r\n            <option value=\"archived\">archived</option>\r\n            <option value=\"default_branch\">default_branch</option>\r\n            <option value=\"disabled\">disabled</option>\r\n            <option value=\"id\">id</option>\r\n            <option value=\"owner\">owner</option>\r\n        </select>\r\n    )\r\n}\r\n\r\nexport default ListCreator;","import React from 'react';\r\nimport ListCreator from './listcreator/listcreator'\r\nimport './userinput.less';\r\nconst Userinput = ({changeUrl, submitUrl, url, selectList}) => {\r\n\r\n//validate url here but do not diable input, red color and message\r\n\r\n    return (\r\n        <div className={\"userinput\"} >\r\n            <h2>Paste url below</h2>\r\n            <input value={url} type=\"text\" onChange={(e)=>changeUrl(e.target.value)}></input>\r\n            <button onClick={submitUrl}>ADD REPO</button>\r\n            <div>\r\n            <h2>List selector</h2>\r\n            <ListCreator index={0} selectList={selectList}></ListCreator>\r\n            <ListCreator index={1} selectList={selectList}></ListCreator>\r\n            <ListCreator index={2} selectList={selectList}></ListCreator>\r\n            <ListCreator index={3} selectList={selectList}></ListCreator>\r\n            <ListCreator index={4} selectList={selectList}></ListCreator>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  Userinput;","import React, {Component} from 'react';\r\n\r\nexport default class ErrorBoundary extends Component {\r\n    state={hasError: false, error: \"\"};\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true, error: error });\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        // Update state so the next render will show the fallback UI.\r\n        return { hasError: true };\r\n      }\r\n\r\n    render(){\r\n        if (this.state.hasError) {\r\n            return <div><h1>Something went wrong!</h1></div>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}","import React from 'react';\r\nimport Repo from './repo/repo'\r\nimport './repos.less';\r\nimport ErrorBoundary from '../errorboundary/errorboundary';\r\n\r\nconst Repos = (props) => {\r\n    let newRepos = null;\r\nif (props.repos) {\r\n    newRepos = props.repos.map((repo)=>{return <ErrorBoundary key={repo.id}><Repo  name={repo.name} owner={repo.owner.login} description={repo.description} pushed_at={repo.pushed_at} repo={repo} list={props.list} /></ErrorBoundary>});\r\n}\r\n    return (\r\n        <ErrorBoundary>\r\n        <div className={\"repos\"}>{newRepos}</div>\r\n        </ErrorBoundary>\r\n    )\r\n}\r\n\r\nexport default Repos;","import axios from 'axios';\r\n\r\nexport const ADD = 'ADD';\r\nexport const CHANGE = \"CHANGE\";\r\nexport const SELECT_LIST = \"SELECT_LIST\";\r\nexport const THROW_ERROR = \"THROW_ERROR\";\r\n\r\nexport const passdata = (data) => {\r\n    return {\r\n        type: ADD,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const submit = (url) => {\r\n    let apiUrl = (url) => {\r\n        let cutUrl = url.split(\"/\");\r\n        \r\n        let owner = cutUrl[3];\r\n        let repo = cutUrl[4];\r\n        return (\r\n            `https://api.github.com/repos/${owner}/${repo}`\r\n        )\r\n    }\r\n   \r\n    return dispatch => {\r\n        axios.get(apiUrl(url)).then(response => {\r\n            console.log(response, response.data);\r\n            dispatch(passdata(response.data))\r\n        }).catch(error => {\r\n            console.log(error);\r\n            dispatch(passdata(error))\r\n        })\r\n    }\r\n}","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport '../components/repos/repo/repo';\nimport '../components/userinput/user-input';\nimport Repos from '../components/repos/repos';\nimport Userinput from '../components/userinput/user-input';\nimport {submit} from '../store/actions';\nimport ErrorBoundary from '../components/errorboundary/errorboundary';\nimport './App.less'\n\n\n\nfunction App(props) {\n\n  return (\n    <div className=\"App\">\n      <nav><h1>Get Repo App</h1></nav>\n      \n     <Userinput selectList={props.selectList} url={props.url} submitUrl={()=>props.submitUrl(props.url)} changeUrl={props.changeUrl}></Userinput>\n     \n     <ErrorBoundary>\n     <Repos repos={props.repos} list={props.list}/>\n     </ErrorBoundary>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    url: state.url,\n    repos: state.userRepos,\n    list: state.list\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submitUrl: (url)=>dispatch(submit(url)),\n    changeUrl: (url)=>dispatch({type:\"CHANGE\", payload:url}),\n    selectList: (index, value)=>dispatch({type:\"SELECT_LIST\", payload:{index:index, value:value}})\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    userRepos: [],\r\n    list: {\r\n        0: \"none\",\r\n        1: \"none\",\r\n        2: \"none\",\r\n        3: \"none\",\r\n        4: \"none\"\r\n    },\r\n    url: \"https://github.com/Mostrowski8/GitHub-API\"\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"CHANGE\":\r\n\r\n            return {\r\n                ...state,\r\n                url: action.payload\r\n            }\r\n            case \"ADD\":\r\n                \r\n                let newRepo = action.payload;\r\n\r\n                \r\n\r\n                let duplicate = state.userRepos.find((repo) => {\r\n                    return repo.id === newRepo.id\r\n                });\r\n                if (duplicate) {\r\n                    let newRepos = state.userRepos.map((repo) => {\r\n                        if (repo.id === newRepo.id) {\r\n                            return newRepo;\r\n                        }\r\n                        return repo;\r\n                    })\r\n                    return {\r\n                        ...state,\r\n                        userRepos: newRepos\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    ...state,\r\n                    userRepos: [...state.userRepos, newRepo]\r\n                }\r\n                case \"SELECT_LIST\":\r\n                    return {\r\n                        ...state,\r\n                        list: {...state.list, [action.payload.index]:action.payload.value}\r\n                    }\r\n                default:\r\n                    return {\r\n                            ...state\r\n                        }\r\n    }\r\n\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore, compose, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport './index.less';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducer';\nimport thunk from 'redux-thunk';\n\n\n\nconst logger = store => {\n    return next =>{\n        return action =>{\n            console.log('[Middleware] Dispatching', action);\n            const result = next(action);\n            console.log('[Middleware] next state', store.getState());\n            return result;\n        }\n        \n    }\n};\n\nconst composeEnchancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnchancers(applyMiddleware(logger, thunk)));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}