{"version":3,"sources":["helper-functions.js","components/repos/repo/list/list.js","components/repos/repo/repo.js","components/userinput/listcreator/listcreator.js","components/userinput/user-input.js","components/repos/repos.js","store/actions.js","components/errorboundary/errorboundary.js","containers/App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["parseValue","value","toString","Object","keys","List","_ref","list","repo","react_default","a","createElement","Repo","ISOdate","format","name","description","owner","pushed_at","className","repo_list_list","moment","Date","parse","ListCreator","selectList","index","onChange","e","target","Userinput","changeUrl","submitUrl","url","type","onClick","listcreator","Repos","props","newRepos","repos","map","repos_repo_repo","key","id","login","passdata","data","payload","ErrorBoundary","state","hasError","error","info","this","JSON","children","Component","connect","userRepos","dispatch","axios","get","cutUrl","split","concat","apiUrl","then","response","console","log","catch","submit","user_input","errorboundary_ErrorBoundary","repos_repos","Boolean","window","location","hostname","match","initialState","0","1","2","3","4","reducer","arguments","length","undefined","action","objectSpread","newRepo","find","toConsumableArray","defineProperty","composeEnchancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","next","result","getState","thunk","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b12a71f7.chunk.js","sourcesContent":["import moment from 'moment';\r\n\r\n\r\nexport const parseValue = (value) => {\r\n    switch (typeof value){\r\n        case \"boolean\":\r\n            return value.toString();\r\n        case \"object\":\r\n            var keys = Object.keys( value );\r\n            return  value[keys[0]].toString();\r\n        default:\r\n            return value\r\n    }\r\n}\r\n\r\n//converts ISO date to XX days ago string\r\nexport const parseFromNow = (ISOdate) => moment(Date.parse(ISOdate)).fromNow();\r\n\r\nexport const formatISO = (ISOdate, format) => moment(Date.parse(ISOdate)).format(format);;","import React from 'react';\r\nimport {parseValue} from '../../../../helper-functions';\r\nimport './list.less';\r\n\r\nconst List = ({list, repo}) => {\r\n\r\n\r\n\r\n    return (\r\n       <ul>\r\n            {list[0]!==\"none\" && <li>{list[0]}: {parseValue(repo[list[0]])}</li>}\r\n            {list[1]!==\"none\" && <li>{list[1]}: {parseValue(repo[list[1]])}</li>}\r\n            {list[2]!==\"none\" && <li>{list[2]}: {parseValue(repo[list[2]])}</li>}\r\n            {list[3]!==\"none\" && <li>{list[3]}: {parseValue(repo[list[3]])}</li>}\r\n            {list[4]!==\"none\" && <li>{list[4]}: {parseValue(repo[list[4]])}</li>}\r\n        </ul>\r\n        \r\n    )\r\n}\r\n\r\nexport default List;","import React from 'react';\r\nimport List from './list/list';\r\nimport {parseFromNow, formatISO} from '../../../helper-functions';\r\nimport './repo.less'\r\n\r\nconst Repo = ({name, description, owner, pushed_at, list, repo}) => {\r\n\r\n    return (<div className={\"repo\"}>\r\n        <div className={\"title\"}><h3>{name}</h3></div>\r\n        <div  className={\"content\"}>\r\n        <div><div>Description:</div><div>{description? description:\"lacking\"}</div></div>\r\n        <List list={list} repo={repo}></List>\r\n        <div><div>Owner:</div><div>{owner}</div></div>\r\n        <div><div>Last push:</div><div>{formatISO(pushed_at, 'MM-DD-YYYY LTS')}</div></div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Repo;","import React from 'react';\r\n\r\nconst ListCreator = ({selectList, index}) => {\r\n\r\n    //validate url here but do not diable input, red color and message\r\n\r\n    return (\r\n        <select onChange={(e)=>selectList(index, e.target.value)}>\r\n            <option value=\"none\">None</option>\r\n            <option value=\"open_issues\">open_issues</option>\r\n            <option value=\"archived\">archived</option>\r\n            <option value=\"default_branch\">default_branch</option>\r\n            <option value=\"disabled\">disabled</option>\r\n            <option value=\"id\">id</option>\r\n            <option value=\"owner\">owner</option>\r\n        </select>\r\n    )\r\n}\r\n\r\nexport default ListCreator;","import React from 'react';\r\nimport ListCreator from './listcreator/listcreator'\r\nimport './userinput.less';\r\nconst Userinput = ({changeUrl, submitUrl, url, selectList}) => {\r\n\r\n//validate url here but do not diable input, red color and message\r\n\r\n    return (\r\n        <div className={\"userinput\"} >\r\n            <p>https://github.com/Mostrowski8/GitHub-API</p>\r\n            <h2>Paste url below</h2>\r\n            <input value={url} type=\"text\" onChange={(e)=>changeUrl(e.target.value)}></input>\r\n            <button onClick={submitUrl}>ADD REPO</button>\r\n            <div>\r\n            <h2>List selector</h2>\r\n            <ListCreator index={0} selectList={selectList}></ListCreator>\r\n            <ListCreator index={1} selectList={selectList}></ListCreator>\r\n            <ListCreator index={2} selectList={selectList}></ListCreator>\r\n            <ListCreator index={3} selectList={selectList}></ListCreator>\r\n            <ListCreator index={4} selectList={selectList}></ListCreator>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  Userinput;","import React from 'react';\r\nimport Repo from './repo/repo'\r\nimport './repos.less'\r\n\r\nconst Repos = (props) => {\r\n    let newRepos = null;\r\nif (props.repos) {\r\n    newRepos = props.repos.map((repo)=>{return <Repo key={repo.id} name={repo.name} owner={repo.owner.login} description={repo.description} pushed_at={repo.pushed_at} repo={repo} list={props.list} />});\r\n}\r\n    return (\r\n        <div className={\"repos\"}>{newRepos}</div>\r\n    )\r\n}\r\n\r\nexport default Repos;","import axios from 'axios';\r\n\r\nexport const ADD = 'ADD';\r\nexport const CHANGE = \"CHANGE\";\r\nexport const SELECT_LIST = \"SELECT_LIST\";\r\n\r\nexport const passdata = (data) => {\r\n    return {\r\n        type: ADD,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const submit = (url) => {\r\n    let apiUrl = (url) => {\r\n        let cutUrl = url.split(\"/\");\r\n        \r\n        let owner = cutUrl[3];\r\n        let repo = cutUrl[4];\r\n        return (\r\n            `https://api.github.com/repos/${owner}/${repo}`\r\n        )\r\n    }\r\n   \r\n    return dispatch => {\r\n        axios.get(apiUrl(url)).then(response => {\r\n            console.log(response, response.data);\r\n            dispatch(passdata(response.data))\r\n        }).catch(error => {\r\n            console.log(error);\r\n            dispatch(passdata(error))\r\n        })\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class ErrorBoundary extends Component {\r\n    state={hasError: false, error: \"\"};\r\n\r\n    componentDidCatch(error, info) {\r\n        return { hasError: true, error: error };\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError) {\r\n            return <div><h1>Something went wrong</h1><p>{JSON.parse(this.state.error)}</p></div>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport '../components/repos/repo/repo';\nimport '../components/userinput/user-input';\nimport Repos from '../components/repos/repos';\nimport Userinput from '../components/userinput/user-input';\nimport {submit} from '../store/actions';\nimport ErrorBoundary from '../components/errorboundary/errorboundary';\nimport './App.less'\n\n\n\nfunction App(props) {\n\n  return (\n    <div className=\"App\">\n      <nav><h1>Get Repo App</h1></nav>\n      \n     <Userinput selectList={props.selectList} url={props.url} submitUrl={()=>props.submitUrl(props.url)} changeUrl={props.changeUrl}></Userinput>\n     \n     <ErrorBoundary>\n     <Repos repos={props.repos} list={props.list}/>\n     </ErrorBoundary>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    url: state.url,\n    repos: state.userRepos,\n    list: state.list\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submitUrl: (url)=>dispatch(submit(url)),\n    changeUrl: (url)=>dispatch({type:\"CHANGE\", payload:url}),\n    selectList: (index, value)=>dispatch({type:\"SELECT_LIST\", payload:{index:index, value:value}})\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    userRepos: [],\r\n    list: {\r\n        0: \"none\",\r\n        1: \"none\",\r\n        2: \"none\",\r\n        3: \"none\",\r\n        4: \"none\"\r\n    },\r\n    url: \"\"\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"CHANGE\":\r\n\r\n            return {\r\n                ...state,\r\n                url: action.payload\r\n            }\r\n            case \"ADD\":\r\n                let newRepo = action.payload;\r\n\r\n                let duplicate = state.userRepos.find((repo) => {\r\n                    return repo.id === newRepo.id\r\n                });\r\n                if (duplicate) {\r\n                    let newRepos = state.userRepos.map((repo) => {\r\n                        if (repo.id === newRepo.id) {\r\n                            return newRepo;\r\n                        }\r\n                        return repo;\r\n                    })\r\n                    return {\r\n                        ...state,\r\n                        userRepos: newRepos\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    ...state,\r\n                    userRepos: [...state.userRepos, newRepo]\r\n                }\r\n                case \"SELECT_LIST\":\r\n                    return {\r\n                        ...state,\r\n                        list: {...state.list, [action.payload.index]:action.payload.value}\r\n                    }\r\n                    default:\r\n                        return {\r\n                            ...state\r\n                        }\r\n    }\r\n\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore, compose, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport './index.less';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducer';\nimport thunk from 'redux-thunk';\n\n\n\nconst logger = store => {\n    return next =>{\n        return action =>{\n            console.log('[Middleware] Dispatching', action);\n            const result = next(action);\n            console.log('[Middleware] next state', store.getState());\n            return result;\n        }\n        \n    }\n};\n\nconst composeEnchancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnchancers(applyMiddleware(logger, thunk)));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}